package web.salons.model;
// Generated Feb 22, 2021 12:43:00 AM by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.ColumnResult;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SqlResultSetMapping;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.NamedNativeQuery;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * ServicesDetaids generated by hbm2java
 */
@Entity
@Table(name = "services_details", schema = "dbo", catalog = "SalonNails")
public class ServiceDetail implements java.io.Serializable {

	private int serviceDetailId;
	private Services services;
	private String title;
	private String descripttion;
	private double price;
	private Date createdAt;
	private String timeToComplete;
	private double sale;
	private String mainImage;
	private String content;
	private Set<ImageService> imageServiceses = new HashSet<ImageService>(0);

	public ServiceDetail() {

	}

	public ServiceDetail(Services services, String title, String descripttion, String content, double price, String timeToComplete,
			double sale, String mainImage) {
		super();
		this.services = services;
		this.title = title;
		this.descripttion = descripttion;
		this.price = price;
		this.timeToComplete = timeToComplete;
		this.sale = sale;
		this.mainImage = mainImage;
		this.content = content;
	}

	public ServiceDetail(int serviceDetailId, Services services, String title, String descripttion, String content, double price,
			String timeToComplete, double sale, String mainImage) {
		super();
		this.serviceDetailId = serviceDetailId;
		this.services = services;
		this.title = title;
		this.descripttion = descripttion;
		this.price = price;
		this.timeToComplete = timeToComplete;
		this.sale = sale;
		this.mainImage = mainImage;
		this.content = content;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "serviceDetailID", unique = true, nullable = false)
	public int getServiceDetailId() {
		return this.serviceDetailId;
	}

	public void setServiceDetailId(int serviceDetailId) {
		this.serviceDetailId = serviceDetailId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "serviceID", nullable = false)
	public Services getServices() {
		return this.services;
	}

	public void setServices(Services services) {
		this.services = services;
	}

	@Column(name = "title", nullable = false, length = 150)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "descripttion", nullable = false, length = 500)
	public String getDescripttion() {
		return this.descripttion;
	}

	public void setDescripttion(String descripttion) {
		this.descripttion = descripttion;
	}

	@Column(name = "price", nullable = false, precision = 53, scale = 0)
	public double getPrice() {
		return this.price;
	}

	public void setPrice(double price) {
		this.price = price;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "createdAt", length = 10)
	public Date getCreatedAt() {
		return this.createdAt;
	}

	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}

	@Column(name = "timeToComplete", nullable = false, length = 50)
	public String getTimeToComplete() {
		return this.timeToComplete;
	}

	public void setTimeToComplete(String timeToComplete) {
		this.timeToComplete = timeToComplete;
	}

	@Column(name = "sale", precision = 53, scale = 0)
	public Double getSale() {
		return this.sale;
	}

	public void setSale(Double sale) {
		this.sale = sale;
	}

	@Column(name = "mainImage", nullable = false, length = 1000)
	public String getMainImage() {
		return this.mainImage;
	}

	public void setMainImage(String mainImage) {
		this.mainImage = mainImage;
	}

	@Column(name = "content", nullable = false, length = 1000)
	public String getContent() {
		return this.content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "servicesDetails")
	public Set<ImageService> getImageServiceses() {
		return this.imageServiceses;
	}

	public void setImageServiceses(Set<ImageService> imageServiceses) {
		this.imageServiceses = imageServiceses;
	}

}
