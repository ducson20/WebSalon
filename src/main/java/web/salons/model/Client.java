package web.salons.model;
// Generated Feb 22, 2021 12:43:00 AM by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * Clients generated by hbm2java
 */
@Entity
@Table(name = "clients", schema = "dbo", catalog = "SalonNails")
public class Client implements java.io.Serializable {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "userID", unique = true)
	private int userId;
	@Column(name = "userEmail")
	private String userEmail;
	@Column(name = "firstName")
	private String firstName;
	@Column(name = "lastName")
	private String lastName;
	@Column(name = "createdAt")
	private Date createdAt;
	@Column(name = "gender")
	private String gender;
	@Column(name = "password")
	private String password;
	@Column(name = "hashSendMail")
	private String hashSendMail;
	@Column(name = "phone")
	private String phone;
	@Column(name = "imageUrl")
	private String imageUrl;
	@Column(name = "enabled")
	private boolean enabled;
	@Column(name = "account_non_locked")
	private boolean accountNonLocked;
	@Column(name = "failed_attempt")
	private int failedAttempt;
	@Column(name = "lock_time")
	private Date lockTime;
	@Column(name = "one_time_password")
	private String oneTimePassword;
	@Column(name = "otp_requested_time")
	private Date otpRequestedTime;
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "clients")
	@JsonIgnore
	private Set<Appointment> appointmentses = new HashSet<Appointment>(0);
	@ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
	@JoinTable(name = "users_roles", joinColumns = @JoinColumn(referencedColumnName = "userID"), inverseJoinColumns = @JoinColumn(referencedColumnName = "roleID"))
	private Set<Role> roles = new HashSet<>();
	@Enumerated(EnumType.STRING)
	@Column(name = "auth_provider")
	private AuthenticationProvider auth_provider;

	public Client() {

	}

	public Client(String userEmail, String firstName, String lastName, String password, String phone) {
		super();
		this.userEmail = userEmail;
		this.firstName = firstName;
		this.lastName = lastName;
		this.password = password;
		this.phone = phone;
	}

	public int getUserId() {
		return userId;
	}

	public void setUserId(int userId) {
		this.userId = userId;
	}

	public String getUserEmail() {
		return userEmail;
	}

	public void setUserEmail(String userEmail) {
		this.userEmail = userEmail;
	}

	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	public Date getCreatedAt() {
		return createdAt;
	}

	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}

	public String getGender() {
		return gender;
	}

	public void setGender(String gender) {
		this.gender = gender;
	}

	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getHashSendMail() {
		return hashSendMail;
	}

	public void setHashSendMail(String hashSendMail) {
		this.hashSendMail = hashSendMail;
	}

	public String getPhone() {
		return this.phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public String getImageUrl() {
		return imageUrl;
	}

	public void setImageUrl(String imageUrl) {
		this.imageUrl = imageUrl;
	}

	public boolean isEnabled() {
		return enabled;
	}

	public void setEnabled(boolean enabled) {
		this.enabled = enabled;
	}

	public boolean isAccountNonLocked() {
		return accountNonLocked;
	}

	public void setAccountNonLocked(boolean accountNonLocked) {
		this.accountNonLocked = accountNonLocked;
	}

	public int getFailedAttempt() {
		return failedAttempt;
	}

	public void setFailedAttempt(int failedAttempt) {
		this.failedAttempt = failedAttempt;
	}

	public Date getLockTime() {
		return lockTime;
	}

	public void setLockTime(Date lockTime) {
		this.lockTime = lockTime;
	}

	public AuthenticationProvider getAuth_provider() {
		return auth_provider;
	}

	public void setAuth_provider(AuthenticationProvider auth_provider) {
		this.auth_provider = auth_provider;
	}

	public Set<Appointment> getAppointmentses() {
		return this.appointmentses;
	}

	public void setAppointmentses(Set<Appointment> appointmentses) {
		this.appointmentses = appointmentses;
	}

	public Set<Role> getRoles() {
		return roles;
	}

	public void setRoles(Set<Role> roles) {
		this.roles = roles;
	}

	public void addRole(Role role) {
		this.roles.add(role);
	}

	public String getOneTimePassword() {
		return oneTimePassword;
	}

	public void setOneTimePassword(String oneTimePassword) {
		this.oneTimePassword = oneTimePassword;
	}

	public Date getOtpRequestedTime() {
		return otpRequestedTime;
	}

	public void setOtpRequestedTime(Date otpRequestedTime) {
		this.otpRequestedTime = otpRequestedTime;
	}

	public boolean isOTPRequired() {
		if (this.oneTimePassword == null) {
			return false;
		}

		long otpRequestedTimeInMillis = this.otpRequestedTime.getTime();

		if (otpRequestedTimeInMillis + OTP_VALID_DURATION < System.currentTimeMillis()) {
			System.out.println("Het Han");
			return false; // OTP expires
		}
		System.out.println("Chua Het Han");
		return true;
	}

	private static final long OTP_VALID_DURATION = 5 * 60 * 1000; // 5 minutes
}
